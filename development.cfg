# This is evaluated as a python file by flask.
# only names in capitals will be taken into app.config opbject.
import os

from flask_tern.auth import settings as auth_settings
from flask_tern.auth import User


SQLALCHEMY_DATABASE_URI = "sqlite:////{}/tokenstore.db".format(os.getcwd())

# TODO: commit?, teardown ? on request end? https://stackoverflow.com/a/33284980
# SQLALCHEMY_COMMIT_ON_TEARDOWN ????


############################################################
# A development user database used for basic authentication
#
#  define two users with simple username and passwords, and roles
############################################################
user_db = {
    "admin": {
        "username": "admin",
        "passsword": "admin",
        "name": "Admin",
        "roles": ["admin"],
    },
    "user": {"username": "user", "password": "user", "name": "User", "roles": ["user"]},
}

# map aip_keys to users in user_db
api_key = {
    "admin_api_key": "admin",
    "user_api_key": "user",
}


def dev_userinfo_from_basic(auth_info):
    if auth_info["username"] and auth_info["password"]:
        uname = auth_info["username"]
        user_entry = user_db.get(uname, {})
        if user_entry["password"] != auth_info["password"]:
            return None
        return User(
            id=uname,
            name=user_entry["name"],
            email=uname + "@example.com",
            email_verified=True,
            roles=user_entry["roles"],
            claims={
                "family_name": "Example",
                "given_name": user_entry["name"],
            }
        )
    return None


def dev_userinfo_from_apikey(auth_info):
    if auth_info["token"] in api_key:
        uid = api_key[auth_info["token"]]
        return User(
            id=uid,
            name=user_db[uid]["name"],
            email=user_db[uid]["name"] + "@example.com",
            roles=user_db[uid]["roles"],
        )
    return None


# register our dummy user info method
# import default and extend it
USERINFO_MAP = auth_settings.USERINFO_MAP
USERINFO_MAP.update(
    {
        "basic": dev_userinfo_from_basic,
        "apikey-v1": dev_userinfo_from_apikey,
    }
)
