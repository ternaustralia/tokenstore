openapi: "3.0.0"

info:
  title: Token Manager
  version: "1.0"
  description: |
    # Introduction

    A small API service to manage third party OAuth2 authorizations, and token refresh.
    It's main purpose is to manage offline tokens to third party OAuth2 services.

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      # TODO: template this url
      openIdConnectUrl: https://auth-test.tern.org.au/auth/realms/local/.well-known/openid-configuration
    # TODO: could also define api key via custom header, cookie or url parameter
    ApiKeyAuth:
      type: apiKey
      # TODO: openapi-core validates against hard coded scheme
      # scheme: apikey-v1
      # TODO: could also just use BasicAuth auth scheme for apiKey?? -> need to parse basic auth header accordingly to see whether it's user:pw or apikey
      in: header # can be "header", "query" or "cookie"
      name: Authorization

  parameters:
    provider:
      name: provider
      in: path
      description: "An OAuth2 provider id supported by token service. Use /authorizations to discover available providers."
      required: true
      schema:
        type: string

  schemas:
    Authorization:
      # TODO: complete this ... might be the response is not user specific ?
      description: Describes a users authorization for a specific provider
      required: ["provider", "active"]
      properties:
        provider:
          type: string
        active:
          type: boolean
        actions:
          type: object
          properties:
            authorize:
              type: string
            token:
              type: string
            revoke:
              type: string
        metadata:
          type: object
          properties:
            name:
              type: string
              nullable: true
            description:
              type: string
              nullable: true
            url:
              type: string
              nullable: true
            icon:
              type: string
              nullable: true
            logo:
              type: string
              nullable: true
    Token:
      description: Token returned for an authorized provider
      properties:
        access_token:
          description: base64 encoded token
          type: string
        expires_in:
          type: number
        expires_at:
          type: number
        token_type:
          type: string

  responses:
    BadRequest:
      description: Bad request, most likely due to malformed parameters.
    NotFound:
      description: Resource not found.
    Forbidden:
      description: Forbidden. User is not allowed to perform the request.
    Success:
      description: Request sucessfully executed.


security:
  - BasicAuth: []
  - BearerAuth: []
  # colud define list of scopes here
  - OpenID: []

tags:
  - name: discover
  - name: authorizations

paths:
  /authorizations:
    summary: Return list of available OAuth2 providers and current authorization status.
    description: ""
    get:
      tags:
        - discover
      summary: List of authorizations
      description: ""
      responses:
        "200":
          description: List of authorizations
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authorization"
        "403":
          $ref: "#/components/responses/Forbidden"

  /{provider}/authorize:
    summary: Start OAuth2 authorization with provider
    description: "This url needs to be opened in a separate window so that server can properly validate the auth session state."
    get:
      tags:
        - authorizations
      summary: Redirect to providers authorize page
      parameters:
        - $ref: "#/components/parameters/provider"
        - name: return_url
          description: Final URL to redirect to, after OAuth authorization process finishes.
          in: query
          required: false
          schema:
            type: string
      responses:
        "302":
          description: Redirect to provider authorize endpoint.
          headers:
            Location:
              description: URL to start authorization with provider.
              schema:
                type: string
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /{provider}/redirect_uri:
    summary: OAuth2 redirect handler for provider
    description: ""
    get:
      tags:
        - authorizations
      summary: Handle OAuth2 redirect
      # TODO: document OAuth2 redirect parameters? ... there may be error codes in the url
      parameters:
        - $ref: '#/components/parameters/provider'
      responses:
        "302":
          description: Redirect to final original referer.
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /{provider}/token:
    summary: Get access token for provider
    description: ""
    get:
      tags:
        - authorizations
      summary: Get access token for provider
      parameters:
        - $ref: '#/components/parameters/provider'
      responses:
        "200":
          description: An access token structure for provider.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /{provider}/revoke:
    summary: Revoke refresh token for provider
    description: ""
    post:
      tags:
        - authorizations
      summary: Remove authorization for provider.
      parameters:
        - $ref: "#/components/parameters/provider"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
